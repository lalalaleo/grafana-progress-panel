{"version":3,"sources":["../src/progresschart_ctrl.js"],"names":["MetricsPanelCtrl","_","unit","kbn","ProgressChartCtrl","$scope","$injector","$rootScope","hiddenSeries","panelDefaults","colorArr","progressArr","barsArr","defaults","panel","events","on","onRender","bind","onDataReceived","onDataError","onInitEditMode","addEditorTab","unitFormats","getUnitFormats","subItem","obj","format","value","valueShow","formatValue","render","series","data","parseSeries","length","checkSeries","targets","that","forEach","index","arr","datapoints","perValue","percent","total","proLen","perTotal","i","indTmp","Math","round","floor","seriesData","dataList","map","seriesHandler","proObj","objTemp","label","type","push","splice","scope","elem","$panelContainer","find","$progressPanel","css","offsetHeight","templateUrl"],"mappings":"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","file":"progresschart_ctrl.js","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport unit from './unit';\nimport kbn from 'app/core/utils/kbn';\nimport './css/panel.css!';\n\nexport class ProgressChartCtrl extends MetricsPanelCtrl {\n\n  constructor($scope, $injector, $rootScope) {\n    super($scope, $injector);\n    this.$rootScope = $rootScope;\n    this.hiddenSeries = {};\n\n    var panelDefaults = {\n\t\tcolorArr:['#5eb1e4','#4888e0','#2adf6e','#FFB90F','#FF4500'],\n\t\tprogressArr:[],\n\t\tbarsArr:[]\n    };\n\n    _.defaults(this.panel, panelDefaults);\n\n    this.events.on('render', this.onRender.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Options', 'public/plugins/grafana-progress-panel/editor.html', 2);\n    this.unitFormats = kbn.getUnitFormats();\n  }\n  \n  setUnitFormat(subItem, obj) {\t\n\tobj.format = subItem.value;\n\tobj.valueShow = unit.formatValue(this.panel, obj.value, subItem.value);\n    this.render();\n  }\n\n  onDataError() {\n    this.series = [];\n    this.render();\n  }\n\n  onRender() {\n    this.data = this.parseSeries(this.series);\n  }\n\n  parseSeries(series) {\t\n\tif(series && series.length > 0){\n\t\tseries = unit.checkSeries(this.panel.targets, series);\n\t\tlet that = this;\n\t\tthis.panel.progressArr.forEach((value, index, arr) => {\n\t\t\t if(series[index] && series[index].datapoints){\n\t\t\t\t let datapoints = series[index].datapoints;\n\t\t\t\t if(datapoints.length > 0){\n\t\t\t\t\t value.value = datapoints[datapoints.length-1][0];\n\t\t\t\t\t value.valueShow = unit.formatValue(that.panel, value.value, value.format);\n\t\t\t\t\t let perValue = datapoints[datapoints.length-1][0];\n\t\t\t\t\t if(perValue>100){\n\t\t\t\t\t\t perValue = 100;\n\t\t\t\t\t }\n\t\t\t\t\t if(perValue < 0){\n\t\t\t\t\t\t perValue = 0;\n\t\t\t\t\t }\n\t\t\t\t\t value.percent = perValue;\n\t\t\t\t }else{\n\t\t\t\t\t value.value = 0;\n\t\t\t\t\t value.valueShow = 'N/A'\n\t\t\t\t\t value.percent = '0';\n\t\t\t\t }\n\t\t\t }\n\t\t});\n\n\t\tlet total = 0;\n\t\tlet proLen = this.panel.progressArr.length;\n\t\tlet perTotal = 0;\n\t\tfor(var i=0; i<this.panel.barsArr.length; i++){\n\t\t\tlet indTmp = proLen + i;\n\t\t\tif(series[indTmp] && series[indTmp].datapoints){\n\t\t\t\t let datapoints = series[indTmp].datapoints; \n\t\t\t\t if(datapoints.length > 0){\n\t\t\t\t\t this.panel.barsArr[i].value = datapoints[datapoints.length-1][0];\n\t\t\t\t\t total = Math.round(total) + Math.round(this.panel.barsArr[i].value);\n\t\t\t\t\t this.panel.barsArr[i].valueShow = unit.formatValue(this.panel, this.panel.barsArr[i].value, this.panel.barsArr[i].format);\n\t\t\t\t }else{\n\t\t\t\t\t this.panel.barsArr[i].value = 0;\n\t\t\t\t\t this.panel.barsArr[i].valueShow = 'N/A';\n\t\t\t\t }\n\t\t\t}else{\n\t\t\t\ttotal = Math.round(total) + Math.round(this.panel.barsArr[i].value);\n\t\t\t}\n\t\t}\n\t\tthis.panel.barsArr.forEach((value, index, arr) => {\n\t\t\t if(index == arr.length-1){\n\t\t\t\t value.percent = 100- perTotal;\n\t\t\t }else{\n\t\t\t\t if(value.value){\n\t\t\t\t\t value.percent = (value.value/total)*100;\n\t\t\t\t\t value.percent = Math.floor(value.percent);\n\t\t\t\t\t perTotal += value.percent;\n\t\t\t\t }else{\n\t\t\t\t\t value.percent = 0;\n\t\t\t\t }\n\t\t\t }\n\t\t})\n\t}\t\n  }\n  \n  seriesHandler(seriesData) {\n\treturn seriesData;\n  }\n\n  onDataReceived(dataList) {\n    this.series = dataList.map(this.seriesHandler.bind(this));\n    this.data = this.parseSeries(this.series);\n    this.render(this.data);\n  }\n  \n  getProcessStyle(proObj) {\n\t return {'width':proObj.percent+'%'};\n  }\n  \n  addProgress() {\n\t  let objTemp = {\n\t\t  label:'',unit:'',type:'solid',value:0,percent:'0%',format: 'short'\n\t  };\n\t  this.panel.progressArr.push(objTemp);\n  }\n  \n  addBarMember() {\n\t  let objTemp = {\n\t\t  label:'',unit:'',value: 0,percent:'0%',format: 'short'\n\t  };\n\t  this.panel.barsArr.push(objTemp); \n  }\n  \n  delProgress(index) {\n\t  this.panel.progressArr.splice(index, 1); \n  }\n  \n  delBarMember(index) {\n\t  this.panel.barsArr.splice(index, 1); \n\t  let total = 0;\n\t  this.panel.barsArr.forEach((value, index, arr) => {\n\t\t  total = Math.round(total) + Math.round(value.value);\n\t  })\n\t  this.panel.barsArr.forEach((value, index, arr) => {\n\t\t  value.percent = (value.value/total)*100+'%';\n\t  })\t  \n  }\n  \n  link(scope, elem) {\n\tthis.events.on('render', () => {\n\t    const $panelContainer = elem.find('.panel-container');\n\t    const $progressPanel = elem.find('.progress-panel');\n\t\t$progressPanel.css('height', ($panelContainer[0].offsetHeight-40)+'px');\n\t});\n  }\n}\n\nProgressChartCtrl.templateUrl = 'module.html';\n"]}